{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import confusion_matrix\n\nfrom category_encoders import CatBoostEncoder\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-09T20:05:10.522454Z","iopub.execute_input":"2025-03-09T20:05:10.522820Z","iopub.status.idle":"2025-03-09T20:05:11.126198Z","shell.execute_reply.started":"2025-03-09T20:05:10.522792Z","shell.execute_reply":"2025-03-09T20:05:11.125101Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"# Import Dataset","metadata":{}},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/titanic/train.csv')\ndf_train.head()\n#df_train.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-09T19:54:37.008940Z","iopub.execute_input":"2025-03-09T19:54:37.009473Z","iopub.status.idle":"2025-03-09T19:54:37.056254Z","shell.execute_reply.started":"2025-03-09T19:54:37.009441Z","shell.execute_reply":"2025-03-09T19:54:37.055247Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"df_test = pd.read_csv('/kaggle/input/titanic/test.csv')\ndf_test.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-09T19:54:41.614812Z","iopub.execute_input":"2025-03-09T19:54:41.615162Z","iopub.status.idle":"2025-03-09T19:54:41.635461Z","shell.execute_reply.started":"2025-03-09T19:54:41.615136Z","shell.execute_reply":"2025-03-09T19:54:41.634489Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"# Setting Features and Label","metadata":{}},{"cell_type":"code","source":"X = df_train.drop(columns=['PassengerId', 'Name', 'Survived'])\ny = df_train['Survived']\n\nX_df_test = df_test.drop(columns=['PassengerId', 'Name'])\ny_df_test = df_test['PassengerId']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-09T19:54:48.029955Z","iopub.execute_input":"2025-03-09T19:54:48.030420Z","iopub.status.idle":"2025-03-09T19:54:48.045003Z","shell.execute_reply.started":"2025-03-09T19:54:48.030382Z","shell.execute_reply":"2025-03-09T19:54:48.043725Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"# Misisng Values","metadata":{}},{"cell_type":"code","source":"numerical_columns = X.select_dtypes(include=[np.number]).columns\ncategorical_columns = X.select_dtypes(include=['object']).columns\n\nX[numerical_columns] = X[numerical_columns].fillna(-1)\nX[categorical_columns] = X[categorical_columns].fillna(\"No Attribute\")\n\nX_df_test[numerical_columns] = X_df_test[numerical_columns].fillna(-1)\nX_df_test[categorical_columns] = X_df_test[categorical_columns].fillna(\"No Attribute\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-09T19:54:56.046865Z","iopub.execute_input":"2025-03-09T19:54:56.047235Z","iopub.status.idle":"2025-03-09T19:54:56.088204Z","shell.execute_reply.started":"2025-03-09T19:54:56.047206Z","shell.execute_reply":"2025-03-09T19:54:56.086797Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"# Defining Preprocessing Steps","metadata":{}},{"cell_type":"code","source":"numeric_transformers = Pipeline(steps=[('scaling', StandardScaler())])\ncategorical_transformers = Pipeline(steps=('catboosting', CatBoostEncoder(cols=categorical_columns, random_state=0)))\npreprocessor = ColumnTransformer(transformers=[('num', numeric_transformers, numerical_columns),\n                                               ('cat', categorical_transformers, categorical_columns)])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-09T20:11:54.413338Z","iopub.execute_input":"2025-03-09T20:11:54.413895Z","iopub.status.idle":"2025-03-09T20:11:54.418976Z","shell.execute_reply.started":"2025-03-09T20:11:54.413864Z","shell.execute_reply":"2025-03-09T20:11:54.417796Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"# Split The Training Data","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-09T20:12:17.366821Z","iopub.execute_input":"2025-03-09T20:12:17.367205Z","iopub.status.idle":"2025-03-09T20:12:17.376997Z","shell.execute_reply.started":"2025-03-09T20:12:17.367174Z","shell.execute_reply":"2025-03-09T20:12:17.375816Z"}},"outputs":[],"execution_count":9}]}